import streamlit as st
import pandas as pd

# --- Clear All snippet (placed at the top) ---
def clear_session_keys():
    keys_to_clear = [
        "lp_dropdown", "country_dropdown", "degree_indonesia", "state_india", "inst_type_india", "degree_level_india",
        "state_usa", "degree_usa", "degree_level_uk", "degree_level_ca", "degree_hk", "degree_vn",
        "state_aus_nz", "degree_level_aus_nz", "state_bd", "inst_type_bd", "inst_type_ph", "inst_type_my", "inst_type_sg"
    ]
    for key in keys_to_clear:
        if key in st.session_state:
            del st.session_state[key]

if st.button("Clear All"):
    clear_session_keys()


# --- Helper functions ---
# For single-select dropdowns (used for Learning Pathway and Country)
def dropdown_with_counts(label, df, column, default_option, include_all=False, all_option="All", key=None):
    options = {}
    options[default_option] = None
    if include_all:
        options[f"{all_option} (Datapoints in this slice: {len(df)})"] = "ALL"
    unique_vals = sorted(df[column].dropna().unique())
    counts = df[column].value_counts().to_dict()
    for val in unique_vals:
        options[f"{val} (Datapoints in this slice: {counts.get(val, 0)})"] = val
    selected_label = st.selectbox(label, list(options.keys()), key=key)
    return options[selected_label]

# For multiselect filtering (all categorical columns after country selection)
def multiselect_with_counts(label, df, column, include_all=False, all_option="All", key=None):
    options = []
    if include_all:
        options.append(f"{all_option} (Datapoints in this slice: {len(df)})")
    unique_vals = sorted(df[column].dropna().unique())
    counts = df[column].value_counts().to_dict()
    for val in unique_vals:
        options.append(f"{val} (Datapoints in this slice: {counts.get(val, 0)})")
    selected_options = st.multiselect(label, options, key=key)
    if include_all and any(all_option in s for s in selected_options):
        return ["ALL"]
    return [s.split(" (Datapoints")[0] for s in selected_options]

# Special helper for the country dropdown (remains single-select)
def dropdown_country_with_counts(df, default_option="Select Country", key=None):
    counts = df["country"].value_counts().to_dict()
    options = {}
    options[default_option] = None
    unique_countries = sorted(df["country"].dropna().unique())
    # Merge Australia and New Zealand if present.
    if "Australia" in unique_countries or "New Zealand" in unique_countries:
        unique_countries = [c for c in unique_countries if c not in ["Australia", "New Zealand"]]
        merged_count = counts.get("Australia", 0) + counts.get("New Zealand", 0)
        options[f"Australia & New Zealand (Datapoints in this slice: {merged_count})"] = "Australia & New Zealand"
    for country in unique_countries:
        options[f"{country} (Datapoints in this slice: {counts.get(country, 0)})"] = country
    selected_label = st.selectbox("Select Country", list(options.keys()), key=key)
    return options[selected_label]

# --- Load dataset ---
file_path = "All_country_data.csv"
df = pd.read_csv(file_path)

st.title("Higher Education Filtering System")

# --- 1. Learning Pathway Filter (single-select) ---
lp_options = {}
lp_options["Select Learning Pathway"] = None
lp_counts = df["Learning_Pathway"].value_counts().to_dict()
for lp in sorted(df["Learning_Pathway"].dropna().unique()):
    lp_options[f"{lp} (Datapoints in this slice: {lp_counts.get(lp, 0)})"] = lp
selected_lp_label = st.selectbox("Select Learning Pathway", list(lp_options.keys()), key="lp_dropdown")
selected_lp = lp_options[selected_lp_label]

if selected_lp is None:
    st.write("Please select a Learning Pathway to enable further filters.")
else:
    df_lp = df[df["Learning_Pathway"] == selected_lp].copy()
    st.write(f"Data points after Learning Pathway selection: {len(df_lp)}")
    
    # --- 2. Country Filter (single-select) ---
    selected_country = dropdown_country_with_counts(df_lp, key="country_dropdown")
    if selected_country is None:
        st.write("Please select a Country to continue.")
        st.slider("Select Cost Range", min_value=0, max_value=1, value=(0,1), disabled=True)
        st.selectbox("Select Degree", ["Select Degree"], disabled=True)
    else:
        if selected_country == "Australia & New Zealand":
            df_country = df_lp[df_lp["country"].isin(["Australia", "New Zealand"])].copy()
        else:
            df_country = df_lp[df_lp["country"] == selected_country].copy()
        st.write(f"Data points available for **{selected_country}**: {len(df_country)}")
        
        # --- Country-Specific Filtering Using Multiselects ---
        if selected_country == "Indonesia":
            df_country["cost"] = pd.to_numeric(df_country["cost"], errors='coerce').fillna(0)
            selected_degrees = multiselect_with_counts("Select Degree", df_country, "degree", include_all=True, key="degree_indonesia")
            if not selected_degrees:
                st.write("Please select at least one Degree.")
            else:
                if "ALL" in selected_degrees:
                    df_filtered = df_country.copy()
                else:
                    df_filtered = df_country[df_country["degree"].isin(selected_degrees)].copy()
                st.write(f"Data points after Degree selection: {len(df_filtered)}")
                min_cost = int(df_filtered["cost"].min())
                max_cost = int(df_filtered["cost"].max())
                if min_cost >= max_cost:
                    st.write(f"Cost is fixed at {min_cost}")
                    selected_cost_range = (min_cost, max_cost)
                else:
                    selected_cost_range = st.slider("Select Cost Range", min_value=min_cost, max_value=max_cost, value=(min_cost, max_cost))
                df_filtered = df_filtered[(df_filtered["cost"] >= selected_cost_range[0]) & (df_filtered["cost"] <= selected_cost_range[1])]
                st.write(f"Data points after Cost Range selection: {len(df_filtered)}")
                st.dataframe(df_filtered)
        
        elif selected_country == "India":
            selected_states = multiselect_with_counts("Select State", df_country, "state", include_all=True, key="state_india")
            if not selected_states:
                st.write("Please select at least one State to continue.")
            else:
                if "ALL" in selected_states:
                    df_india = df_country.copy()
                else:
                    df_india = df_country[df_country["state"].isin(selected_states)].copy()
                st.write(f"Data points after State selection: {len(df_india)}")
                selected_inst = multiselect_with_counts("Select Institution Type", df_india, "institution_type", include_all=True, key="inst_type_india")
                if not selected_inst:
                    st.write("Please select at least one Institution Type.")
                else:
                    if "ALL" not in selected_inst:
                        df_india = df_india[df_india["institution_type"].isin(selected_inst)].copy()
                    st.write(f"Data points after Institution Type selection: {len(df_india)}")
                    selected_degree_levels = multiselect_with_counts("Select Degree Level", df_india, "degree_level", include_all=True, key="degree_level_india")
                    if not selected_degree_levels:
                        st.write("Please select at least one Degree Level.")
                    else:
                        if "ALL" not in selected_degree_levels:
                            df_india = df_india[df_india["degree_level"].isin(selected_degree_levels)].copy()
                        st.write(f"Data points after Degree Level selection: {len(df_india)}")
                        st.dataframe(df_india)
        
        elif selected_country == "USA":
            selected_states = multiselect_with_counts("Select State", df_country, "state", include_all=True, key="state_usa")
            if not selected_states:
                st.write("Please select at least one State to continue.")
            else:
                if "ALL" in selected_states:
                    df_usa = df_country.copy()
                else:
                    df_usa = df_country[df_country["state"].isin(selected_states)].copy()
                st.write(f"Data points after State selection: {len(df_usa)}")
                selected_degrees = multiselect_with_counts("Select Degree", df_usa, "degree", include_all=True, key="degree_usa")
                if not selected_degrees:
                    st.write("Please select at least one Degree.")
                else:
                    if "ALL" not in selected_degrees:
                        df_usa = df_usa[df_usa["degree"].isin(selected_degrees)].copy()
                    st.write(f"Data points after Degree selection: {len(df_usa)}")
                    st.dataframe(df_usa)
        
        elif selected_country == "United Kingdom":
            df_uk = df_country.copy()
            df_uk["cost_int"] = pd.to_numeric(df_uk["cost_int"], errors='coerce').fillna(0)
            selected_degree_levels = multiselect_with_counts("Select Degree Level", df_uk, "degree_level", include_all=True, key="degree_level_uk")
            if not selected_degree_levels:
                st.write("Please select at least one Degree Level.")
            else:
                if "ALL" not in selected_degree_levels:
                    df_uk = df_uk[df_uk["degree_level"].isin(selected_degree_levels)].copy()
                st.write(f"Data points after Degree Level selection: {len(df_uk)}")
                if df_uk.empty:
                    st.write("No data available for cost selection.")
                else:
                    min_cost = int(df_uk["cost_int"].min())
                    max_cost = int(df_uk["cost_int"].max())
                    if min_cost >= max_cost:
                        st.write(f"Cost is fixed at {min_cost}")
                        selected_cost_range = (min_cost, max_cost)
                    else:
                        selected_cost_range = st.slider("Select Cost Range", min_value=min_cost, max_value=max_cost, value=(min_cost, max_cost))
                    df_uk = df_uk[(df_uk["cost_int"] >= selected_cost_range[0]) & (df_uk["cost_int"] <= selected_cost_range[1])]
                    st.write(f"Data points after Cost Range selection: {len(df_uk)}")
                    st.dataframe(df_uk)
        
        elif selected_country == "Canada":
            df_ca = df_country.copy()
            df_ca["cost_int"] = pd.to_numeric(df_ca["cost_int"], errors='coerce').fillna(0)
            selected_degree_levels = multiselect_with_counts("Select Degree Level", df_ca, "degree_level", include_all=True, key="degree_level_ca")
            if not selected_degree_levels:
                st.write("Please select at least one Degree Level.")
            else:
                if "ALL" not in selected_degree_levels:
                    df_ca = df_ca[df_ca["degree_level"].isin(selected_degree_levels)].copy()
                st.write(f"Data points after Degree Level selection: {len(df_ca)}")
                if df_ca.empty:
                    st.write("No data available for cost selection.")
                else:
                    min_cost = int(df_ca["cost_int"].min())
                    max_cost = int(df_ca["cost_int"].max())
                    if min_cost >= max_cost:
                        st.write(f"Cost is fixed at {min_cost}")
                        selected_cost_range = (min_cost, max_cost)
                    else:
                        selected_cost_range = st.slider("Select Cost Range", min_value=min_cost, max_value=max_cost, value=(min_cost, max_cost), key="slider_ca")
                    df_ca = df_ca[(df_ca["cost_int"] >= selected_cost_range[0]) & (df_ca["cost_int"] <= selected_cost_range[1])]
                    st.write(f"Data points after Cost Range selection: {len(df_ca)}")
                    st.dataframe(df_ca)
        
        elif selected_country == "Hong-kong":
            df_hk = df_country.copy()
            df_hk["cost_int"] = pd.to_numeric(df_hk["cost_int"], errors='coerce').fillna(0)
            selected_degrees = multiselect_with_counts("Select Degree", df_hk, "degree", include_all=True, key="degree_hk")
            if not selected_degrees:
                st.write("Please select at least one Degree.")
            else:
                if "ALL" not in selected_degrees:
                    df_hk = df_hk[df_hk["degree"].isin(selected_degrees)].copy()
                st.write(f"Data points after Degree selection: {len(df_hk)}")
                if df_hk.empty:
                    st.write("No data available for cost selection.")
                else:
                    min_cost = int(df_hk["cost_int"].min())
                    max_cost = int(df_hk["cost_int"].max())
                    if min_cost >= max_cost:
                        st.write(f"Cost is fixed at {min_cost}")
                        selected_cost_range = (min_cost, max_cost)
                    else:
                        selected_cost_range = st.slider("Select Cost Range", min_value=min_cost, max_value=max_cost, value=(min_cost, max_cost), key="slider_hk")
                    df_hk = df_hk[(df_hk["cost_int"] >= selected_cost_range[0]) & (df_hk["cost_int"] <= selected_cost_range[1])]
                    st.write(f"Data points after Cost Range selection: {len(df_hk)}")
                    st.dataframe(df_hk)
        
        elif selected_country == "Vietnam":
            df_vn = df_country.copy()
            df_vn["cost_int"] = pd.to_numeric(df_vn["cost_int"], errors='coerce').fillna(0)
            selected_degrees = multiselect_with_counts("Select Degree", df_vn, "degree", include_all=True, key="degree_vn")
            if not selected_degrees:
                st.write("Please select at least one Degree.")
            else:
                if "ALL" not in selected_degrees:
                    df_vn = df_vn[df_vn["degree"].isin(selected_degrees)].copy()
                st.write(f"Data points after Degree selection: {len(df_vn)}")
                if df_vn.empty:
                    st.write("No data available for cost selection.")
                else:
                    min_cost = int(df_vn["cost_int"].min())
                    max_cost = int(df_vn["cost_int"].max())
                    if min_cost >= max_cost:
                        st.write(f"Cost is fixed at {min_cost}")
                        selected_cost_range = (min_cost, max_cost)
                    else:
                        selected_cost_range = st.slider("Select Cost Range", min_value=min_cost, max_value=max_cost, value=(min_cost, max_cost), key="slider_vn")
                    df_vn = df_vn[(df_vn["cost_int"] >= selected_cost_range[0]) & (df_vn["cost_int"] <= selected_cost_range[1])]
                    st.write(f"Data points after Cost Range selection: {len(df_vn)}")
                    st.dataframe(df_vn)
        
        elif selected_country == "Australia & New Zealand":
            merged_df = df_country.copy()
            merged_df["cost_int"] = pd.to_numeric(merged_df["cost_int"], errors='coerce').fillna(0)
            selected_states = multiselect_with_counts("Select State", merged_df, "state", include_all=True, key="state_aus_nz")
            if not selected_states:
                st.write("Please select at least one State to continue.")
            else:
                if "ALL" not in selected_states:
                    merged_df = merged_df[merged_df["state"].isin(selected_states)].copy()
                st.write(f"Data points after State selection: {len(merged_df)}")
                selected_degree_levels = multiselect_with_counts("Select Degree Level", merged_df, "degree_level", include_all=True, key="degree_level_aus_nz")
                if not selected_degree_levels:
                    st.write("Please select at least one Degree Level.")
                else:
                    if "ALL" not in selected_degree_levels:
                        merged_df = merged_df[merged_df["degree_level"].isin(selected_degree_levels)].copy()
                    st.write(f"Data points after Degree Level selection: {len(merged_df)}")
                    if merged_df.empty:
                        st.write("No data available for cost selection.")
                    else:
                        min_cost = int(merged_df["cost_int"].min())
                        max_cost = int(merged_df["cost_int"].max())
                        if min_cost >= max_cost:
                            st.write(f"Cost is fixed at {min_cost}")
                            selected_cost_range = (min_cost, max_cost)
                        else:
                            selected_cost_range = st.slider("Select Cost Range", min_value=min_cost, max_value=max_cost, value=(min_cost, max_cost), key="slider_aus_nz")
                        merged_df = merged_df[(merged_df["cost_int"] >= selected_cost_range[0]) & (merged_df["cost_int"] <= selected_cost_range[1])]
                        st.write(f"Data points after Cost Range selection: {len(merged_df)}")
                        st.dataframe(merged_df)
        
        elif selected_country == "Bangladesh":
            df_bd = df_country.copy()
            df_bd["cost_int"] = pd.to_numeric(df_bd["cost_int"], errors='coerce').fillna(0)
            selected_states = multiselect_with_counts("Select State", df_bd, "state", include_all=True, key="state_bd")
            if not selected_states:
                st.write("Please select at least one State to continue.")
            else:
                if "ALL" in selected_states:
                    df_bd_filtered = df_bd.copy()
                else:
                    df_bd_filtered = df_bd[df_bd["state"].isin(selected_states)].copy()
                st.write(f"Data points after State selection: {len(df_bd_filtered)}")
                selected_inst = multiselect_with_counts("Select Institution Type", df_bd_filtered, "institution_type", include_all=True, key="inst_type_bd")
                if not selected_inst:
                    st.write("Please select at least one Institution Type.")
                else:
                    if "ALL" not in selected_inst:
                        df_bd_filtered = df_bd_filtered[df_bd_filtered["institution_type"].isin(selected_inst)].copy()
                    st.write(f"Data points after Institution Type selection: {len(df_bd_filtered)}")
                    if df_bd_filtered.empty:
                        st.write("No data available for cost selection.")
                    else:
                        min_cost = int(df_bd_filtered["cost_int"].min())
                        max_cost = int(df_bd_filtered["cost_int"].max())
                        if min_cost >= max_cost:
                            st.write(f"Cost is fixed at {min_cost}")
                            selected_cost_range = (min_cost, max_cost)
                        else:
                            selected_cost_range = st.slider("Select Cost Range", min_value=min_cost, max_value=max_cost, value=(min_cost, max_cost), key="slider_bd")
                        df_bd_filtered = df_bd_filtered[(df_bd_filtered["cost_int"] >= selected_cost_range[0]) & (df_bd_filtered["cost_int"] <= selected_cost_range[1])]
                        st.write(f"Data points after Cost Range selection: {len(df_bd_filtered)}")
                        st.dataframe(df_bd_filtered)
        
        elif selected_country == "Philippines":
            df_ph = df_country.copy()
            df_ph["cost_int"] = pd.to_numeric(df_ph["cost_int"], errors='coerce').fillna(0)
            selected_inst = multiselect_with_counts("Select Institution Type", df_ph, "institution_type", include_all=True, key="inst_type_ph")
            if not selected_inst:
                st.write("Please select at least one Institution Type.")
            else:
                if "ALL" not in selected_inst:
                    df_ph = df_ph[df_ph["institution_type"].isin(selected_inst)].copy()
                st.write(f"Data points after Institution Type selection: {len(df_ph)}")
                if df_ph.empty:
                    st.write("No data available for cost selection.")
                else:
                    min_cost = int(df_ph["cost_int"].min())
                    max_cost = int(df_ph["cost_int"].max())
                    if min_cost >= max_cost:
                        st.write(f"Cost is fixed at {min_cost}")
                        selected_cost_range = (min_cost, max_cost)
                    else:
                        selected_cost_range = st.slider("Select Cost Range", min_value=min_cost, max_value=max_cost, value=(min_cost, max_cost), key="slider_ph")
                    df_ph = df_ph[(df_ph["cost_int"] >= selected_cost_range[0]) & (df_ph["cost_int"] <= selected_cost_range[1])]
                    st.write(f"Data points after Cost Range selection: {len(df_ph)}")
                    st.dataframe(df_ph)
        
        elif selected_country == "Malaysia":
            df_my = df_country.copy()
            df_my["cost_int"] = pd.to_numeric(df_my["cost_int"], errors='coerce').fillna(0)
            selected_inst = multiselect_with_counts("Select Institution Type", df_my, "institution_type", include_all=True, key="inst_type_my")
            if not selected_inst:
                st.write("Please select at least one Institution Type.")
            else:
                if "ALL" not in selected_inst:
                    df_my = df_my[df_my["institution_type"].isin(selected_inst)].copy()
                st.write(f"Data points after Institution Type selection: {len(df_my)}")
                if df_my.empty:
                    st.write("No data available for cost selection.")
                else:
                    min_cost = int(df_my["cost_int"].min())
                    max_cost = int(df_my["cost_int"].max())
                    if min_cost >= max_cost:
                        st.write(f"Cost is fixed at {min_cost}")
                        selected_cost_range = (min_cost, max_cost)
                    else:
                        selected_cost_range = st.slider("Select Cost Range", min_value=min_cost, max_value=max_cost, value=(min_cost, max_cost), key="slider_my")
                    df_my = df_my[(df_my["cost_int"] >= selected_cost_range[0]) & (df_my["cost_int"] <= selected_cost_range[1])]
                    st.write(f"Data points after Cost Range selection: {len(df_my)}")
                    st.dataframe(df_my)
        
        elif selected_country == "Singapore":
            df_sg = df_country.copy()
            df_sg["cost_int"] = pd.to_numeric(df_sg["cost_int"], errors='coerce').fillna(0)
            selected_inst = multiselect_with_counts("Select Institution Type", df_sg, "institution_type", include_all=True, key="inst_type_sg")
            if not selected_inst:
                st.write("Please select at least one Institution Type.")
            else:
                if "ALL" not in selected_inst:
                    df_sg = df_sg[df_sg["institution_type"].isin(selected_inst)].copy()
                st.write(f"Data points after Institution Type selection: {len(df_sg)}")
                if df_sg.empty:
                    st.write("No data available for cost selection.")
                else:
                    min_cost = int(df_sg["cost_int"].min())
                    max_cost = int(df_sg["cost_int"].max())
                    if min_cost >= max_cost:
                        st.write(f"Cost is fixed at {min_cost}")
                        selected_cost_range = (min_cost, max_cost)
                    else:
                        selected_cost_range = st.slider("Select Cost Range", min_value=min_cost, max_value=max_cost, value=(min_cost, max_cost), key="slider_sg")
                    df_sg = df_sg[(df_sg["cost_int"] >= selected_cost_range[0]) & (df_sg["cost_int"] <= selected_cost_range[1])]
                    st.write(f"Data points after Cost Range selection: {len(df_sg)}")
                    st.dataframe(df_sg)
